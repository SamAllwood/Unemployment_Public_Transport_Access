second_stage <- lm(log(Unemployment_rate) ~ PTJA_hat +
No_car_hat +
#                 Traveltime_empcent +
#                               TravelTime_Jobcentre +
White_percent +
Single_parent_household_rate +
Low_qual_percent +
#                            SEC_Management_pc +
#                      SEC_Lower_supervisory_routine_pc+
District,
data = LCR_data_regress)
summary(second_stage)
# Check a third way - use ivreg package
ivreg_model <- ivreg(log(Unemployment_rate) ~ PT_Job_Access_Index  +
No_car_rate +
#            Traveltime_empcent +
#            TravelTime_Jobcentre +
White_percent +
Single_parent_household_rate +
Low_qual_percent +
#            SEC_Management_pc +
#              SEC_Lower_supervisory_routine_pc +
District
| Pop_Dens +
SEC_Management_pc +
#                  Traveltime_empcent +
#                 TravelTime_Jobcentre +
White_percent +
Single_parent_household_rate +
Low_qual_percent +
#                  SEC_Management_pc +
#                   SEC_Lower_supervisory_routine_pc +
District,
data=LCR_data_regress)
(iv_summary <- summary(ivreg_model, diagnostics=TRUE))
wu_hausman_stat <- iv_summary$diagnostics["Wu-Hausman", "statistic"]
wu_hausman_pvalue <- iv_summary$diagnostics["Wu-Hausman", "p-value"]
Weak_instruments_PTJA <- iv_summary$diagnostics["Weak instruments (PT_Job_Access_Index)", "statistic"]
Weak_instruments_PTJA_p <- iv_summary$diagnostics["Weak instruments (PT_Job_Access_Index)", "p-value"]
Weak_instruments_No_car <- iv_summary$diagnostics["Weak instruments (No_car_rate)", "statistic"]
Weak_instruments_No_car_p <- iv_summary$diagnostics["Weak instruments (No_car_rate)", "p-value"]
IV_diagnostics <- iv_summary$diagnostics %>%
as.data.frame() %>%
rename("p.value" = "p-value") %>%
dplyr::select(-c(df1,df2)) %>%
filter(statistic != "NA") %>%
mutate(statistic= as.numeric(statistic),
p.value = as.numeric(p.value)) %>%
mutate(p.value= format(p.value, digits =2, scientific=TRUE),
statistic = round(statistic, 0)) %>%
rownames_to_column( var = "Test") %>%
flextable()%>%
set_table_properties( width = 1, layout = "autofit")
# Create a Word document
doc <- read_docx()
vif_initial <- vif(lm(log(Unemployment_rate) ~ PT_Job_Access_Index +
No_car_rate +
#               Traveltime_empcent +
#               TravelTime_Jobcentre +
White_percent +
Single_parent_household_rate +
Low_qual_percent,# +
#                 SEC_Management_pc +
#                SEC_Lower_supervisory_routine_pc
# Pop_Dens +
# SEC_Upper_Management_pc,
data=LCR_data_regress))
vif_initial
vif_final <- vif(lm(log(Unemployment_rate) ~ PT_Job_Access_Index +
No_car_rate +
#                           Traveltime_empcent +
#                           TravelTime_Jobcentre +
White_percent +
Single_parent_household_rate +
Low_qual_percent,# +
#                  Pop_Dens ,#+
# SEC_Upper_Management_pc, # +
#                         SEC_Management_pc ,
#                          SEC_Lower_supervisory_routine_pc,
data=LCR_data_regress))
vif_final
#2	Correct functional form - good
# OLS Linear Model for comparison - removed district variable
Linear_Model <- lm(Unemployment_rate ~ PT_Job_Access_Index +
No_car_rate +
#             Traveltime_empcent +
#             TravelTime_Jobcentre +
White_percent +
Single_parent_household_rate +
Low_qual_percent, # +
#             SEC_Management_pc +
#                    SEC_Lower_supervisory_routine_pc+
#   District,
data=LCR_data_regress)
#Fixed effects (district) introduced and log transform dependent variable
LogLinear_Model <- lm(log(Unemployment_rate) ~ PT_Job_Access_Index +
No_car_rate +
#                Traveltime_empcent +
#                TravelTime_Jobcentre +
White_percent +
Single_parent_household_rate +
Low_qual_percent +
#               SEC_Management_pc +
#                        SEC_Lower_supervisory_routine_pc+
District,
data=LCR_data_regress)
FE_Model_lm <- lm(Unemployment_rate ~ PT_Job_Access_Index +
No_car_rate +
#             Traveltime_empcent +
#             TravelTime_Jobcentre +
White_percent +
Single_parent_household_rate +
Low_qual_percent +
#             SEC_Management_pc +
#                    SEC_Lower_supervisory_routine_pc+
District,
data=LCR_data_regress)
# Create Residuals vs Fitted plot for Linear_Model
linear_resid_plot <- ggplot(data = FE_Model_lm, aes(.fitted, .resid)) +
geom_point() +
geom_smooth(method = "loess") +
labs(x = "FE-Model; Unemployment Rate (Fitted values)", y = "Residuals")
# Create Residuals vs Fitted plot for LogLinear_Model
loglinear_resid_plot <- ggplot(data = LogLinear_Model, aes(.fitted, .resid)) +
geom_point() +
scale_y_continuous(
limits = c(-5, 11),  # Set y-axis limits
breaks = c(-5,0,5,10),  # Set y-axis breaks
labels = scales::comma  # Format y-axis labels
) +
geom_smooth(method = "loess") +
labs(x = "FE-LL-Model; log(Unemployment Rate) (Fitted values)", y = "Residuals")
# Extract fitted values and residuals
FE_LL_Model_IV_df <- data.frame(
fitted = fitted(ivreg_model),
resid = residuals(ivreg_model)
)
# Create Residuals vs Fitted plot for IV model
FE_IV_resid_plot <- ggplot(data = FE_LL_Model_IV_df, aes(fitted , resid)) +
geom_point() +
geom_smooth(method = "loess") +
scale_y_continuous(
limits = c(-5, 11),  # Set y-axis limits
breaks = c(-5,0,5,10),  # Set y-axis breaks
labels = scales::comma  # Format y-axis labels
) +
labs(x = "FE-LL-IV-Model; log(Unemployment Rate) (Fitted values)", y = "Residuals")
# Combine the plots using patchwork
Residfit <- linear_resid_plot + loglinear_resid_plot +
FE_IV_resid_plot+
plot_layout(nrow = 3)
# Create Residuals vs Fitted plot for IV model
FE_IV_resid_plot <- ggplot(data = FE_LL_Model_IV_df, aes(fitted , resid)) +
geom_point() +
geom_smooth(method = "loess") +
scale_y_continuous(
limits = c(-5, 11),  # Set y-axis limits
breaks = c(-5,0,5,10),  # Set y-axis breaks
labels = scales::comma  # Format y-axis labels
) +
labs(x = "FE-LL-IV-Model; log(Unemployment Rate) (Fitted values)", y = "Residuals")
# Combine the plots using patchwork
Residfit <- linear_resid_plot + loglinear_resid_plot +
FE_IV_resid_plot+
plot_layout(nrow = 3)
# Print the combined plot
print(Residfit)
# Ramsey RESET test - null hypothesis is the model is linear,
#  rejected if p<0.05 and need to look at alternative models
# Loglinear model is better, not as good as the fifth root model
linear_reset <- resettest(Linear_Model, power = 2:3, type = "fitted")
FE_reset <- resettest(FE_Model, power = 2:3, type = "fitted")
loglinear_reset <- resettest(LogLinear_Model, power = 2:3, type = "fitted")
FE_LL_IV_reset <- resettest(FE_LL_Model_IV, power = 2:3, type = "fitted")
(reset_test <- data.frame(
Model = c("OLS Model","FE Model", "FE-LL Model", "FE-LL-IV Model"),
RESET_stat = c(linear_reset$statistic, FE_reset$statistic, loglinear_reset$statistic, FE_LL_IV_reset$statistic),
p_value = c(linear_reset$p.value, FE_reset$p.value, loglinear_reset$p.value, FE_LL_IV_reset$p.value)) %>%
rename("RESET Statistic" = "RESET_stat",
"p-value" = "p_value") %>%
mutate(across("p-value", ~ format(.x, digits = 2,scientific = TRUE)),
across("RESET Statistic", ~ format(.x, digits =2))) %>%
flextable()%>%
set_table_properties( width = 1, layout = "autofit"))
# Plot PTJA and unemployment to visually check for non-linearity - doesn't show anything
plot <- ggplot(LCR_data_regress, aes(x=Unemployment_rate, y=PT_Job_Access_Index)) +
geom_point() +
geom_smooth(method="lm")
logplot <- ggplot(LCR_data_regress, aes(x=log(Unemployment_rate), y=PT_Job_Access_Index)) +
geom_point() +
geom_smooth(method="lm")
linearity <- plot + logplot +
plot_annotation(title = "Comparison of Functional Forms") +
plot_layout(nrow=2)
linearity
Linear_Model_crPlot <- lm(Unemployment_rate ~ PT_Job_Access_Index +
No_car_rate +
#                   Traveltime_empcent +
#                  TravelTime_Jobcentre +
White_percent +
Single_parent_household_rate +
Low_qual_percent , #+
#                   SEC_Intermediate_pc, #+
#                              SEC_Lower_supervisory_routine_pc,
data=LCR_data_regress)
LogLinear_Model_crPlot <- lm(log(Unemployment_rate) ~ PT_Job_Access_Index +
No_car_rate +
#                Traveltime_empcent +
#                TravelTime_Jobcentre +
White_percent +
Single_parent_household_rate +
Low_qual_percent, # +
#                 SEC_Intermediate_pc , #+
#                         SEC_Lower_supervisory_routine_pc,
data=LCR_data_regress)
Linear_Model_crPlot %>% car::crPlots(smooth = list(smoother=car::gamLine, k = 10))
LogLinear_Model_crPlot %>%car::crPlots(ylab="log(Unemp. Rate)",
smooth = list(smoother=car::gamLine, k = 10))
Linear_Model_crPlot %>% car::crPlots(smooth = list(smoother=car::gamLine, k = 10))
LogLinear_Model_crPlot %>%car::crPlots(ylab="log(Unemp. Rate)",
smooth = list(smoother=car::gamLine, k = 10))
second_stage %>%car::crPlots(ylab="log(Unemp. Rate) (IV)",
smooth = list(smoother=car::gamLine, k = 10),
terms = ~.-District)
#3	Errors have constant variance (homoskedasctic) - null hypothesis is homoskedasticity -
#   rejected if p<0.05 and need to use robust standard errors. Loglinear model better
FE_LL_IV_BP <- FE_LL_Model_IV %>%
bptest(studentize = TRUE)
LL_BP <- LogLinear_Model %>%
bptest()
FE_BP <- FE_Model %>%
bptest()
Linear_BP <- Linear_Model %>%
bptest()
(BP_test <- data.frame(
Model = c("OLS Model", "FE Model", "FE-LL Model", "FE-LL-IV Model"),
BP_stat = c(Linear_BP$statistic, FE_BP$statistic, LL_BP$statistic, FE_LL_IV_BP$statistic),
p_value = c(Linear_BP$p.value, FE_BP$p.value, LL_BP$p.value, FE_LL_IV_BP$p.value)) %>%
rename("Breusch-Pagan Statistic" = "BP_stat",
"p-value" = "p_value") %>%
mutate(across("p-value", ~ format(.x, digits = 2,scientific = TRUE))) %>%
mutate(across("Breusch-Pagan Statistic", ~ format(.x, digits = 3))) %>%
flextable() %>%
set_table_properties( width = 1, layout = "autofit"))
#calculate robust standard errors for model coefficients
coeftest(LogLinear_Model, vcov = vcovHC(LogLinear_Model, type = 'HC0'))
coeftest(ivreg_model, vcov = vcovHC(ivreg_model, type = 'HC0'))
coeftest(FE_Model, vcov = vcovHC(FE_Model, type = 'HC0'))
#5		Errors normally distributed - good for FE model, doesn't work for IV model.
# Can work out if necessary
LogLinear_Model  %>%
plot(which = 2)%>%
title (main = "Plot X. Quantile-Quantile plot for residuals")
# Create the histogram of residuals
residual_histogram_FE <- gg_reshist(LogLinear_Model, bins=30) +
labs(x = "Residuals - FE-Model (Log-Linear)", y = "Count") +
theme_bw()
residual_histogram_FE
# Create the histogram of residuals
residual_histogram_IV <- ggplot(FE_LL_Model_IV_df, aes(x = resid)) +
geom_histogram(bins = 30, fill = "black", color = "black", alpha = 0.7) +
theme_bw() +
labs(x = "Residuals - FE-LL-IV Model", y = "Count")
residual_histogram_FE+residual_histogram_IV + plot_annotation(title = "Comparison of Residuals Distribution")
#7		No influential outlier data points - good for FE model, doesn't work for IV. Can work out if necessary
LogLinear_Model  %>%
plot(which = 5)%>%
title (main = "Plot X. Leverage vs Residuals plot")
#8 Spatial Autocorrelation - Calculate Moran's I statistic
# Calculate coordinates of centroids of LSOAs
centroids <- st_centroid(LCR_data_regress)
coords <- st_coordinates(centroids)
#spatial weights matrix
nb <- knn2nb(knearneigh(coords, k=8)) # k = 4 is an example, adjust as needed
listw <- nb2listw(nb, style = "W")
# create binary continuity spatial weights matrix
neighbors <- poly2nb(LCR_data_regress)
# Convert the neighbors list to a binary spatial weights list
binary_weights <- nb2listw(neighbors, style = "B")
# Calculate Moran's I statistic on unemployment rates - Moran's stat 0.5
(moran_unemp <- moran.test(LCR_data_regress$Unemployment_rate, binary_weights))
moran_I_unemp <- round(moran_unemp$estimate[1],3)
moran_expect_unemp <- round(moran_unemp$estimate[2],3)
moran_p_unemp <- round(moran_unemp$p.value,22)
# Calculate Moran's I for PTJA
(moran_PTJA <- moran.test(LCR_data_regress$PT_Job_Access_Index, binary_weights))
moran_I_PTJA <- round(moran_PTJA$estimate[1],3)
moran_PTJA_expect <- round(moran_PTJA$estimate[2],3)
moran_p_PTJA <- round(moran_PTJA$p.value,22)
# Moran's I for residuals from OLS model
residuals_linear <- residuals(Linear_Model)
(moran_test_linear <- moran.test(residuals_linear, binary_weights))
moran_OLS <- round(moran_test_linear$estimate[1],3)
moran_OLS_expect <- round(moran_test_linear$estimate[2],3)
moran_p_OLS <- round(moran_test_linear$p.value,22)
# Moran's I for residuals from FE-linear model
residuals_FE <- residuals(FE_Model)
(moran_test_FE <- moran.test(residuals_FE, binary_weights))
moran_FE <- round(moran_test_FE$estimate[1],3)
moran_FE_expect <- round(moran_test_FE$estimate[2],3)
moran_p_FE <- round(moran_test_FE$p.value,22)
# Moran's I for residuals from the loglinear fixed effects model - loglinear Moran's stat 0.08
residuals_loglinear <- residuals(LogLinear_Model)
(moran_test_loglinear <- moran.test(residuals_loglinear, binary_weights))
moran_FE_LL <- round(moran_test_loglinear$estimate[1],3)
moran_FE_LL_expect <- round(moran_test_loglinear$estimate[2],3)
moran_p_FE_LL <- round(moran_test_loglinear$p.value,22)
# Moran's I for residuals from loglinear FE-IV model - final model
residuals_FE_LL_IV <- residuals(FE_LL_Model_IV)
(moran_test_FE_LL_IV <- moran.test(residuals_FE_LL_IV, binary_weights))
moran_FE_LL_IV <- round(moran_test_FE_LL_IV$estimate[1],3)
moran_FE_LL_IV_expect <- round(moran_test_FE_LL_IV$estimate[2],3)
moran_p_FE_LL_IV <- round(moran_test_FE_LL_IV$p.value,22)
# Moran's I table - needs work for publication
(moran_table <- data.frame(
"Variable / Model"  = c("Unemployment Rate",
"Public Transport Job Accessibility",
"OLS Model Residuals",
"FE-Linear Model Residuals",
"FE-LL (LogLinear) Model Residuals",
"FE-LL-IV Model Residuals"),
Moran_I_Statistic = c(moran_I_unemp, moran_I_PTJA, moran_OLS, moran_FE, moran_FE_LL, moran_FE_LL_IV),
Expected_Moran = c(moran_expect_unemp, moran_PTJA_expect, moran_OLS_expect, moran_FE_expect, moran_FE_expect, moran_FE_LL_IV_expect),
p_value = c(moran_p_unemp, moran_p_PTJA, moran_p_OLS, moran_p_FE, moran_p_FE_LL, moran_p_FE_LL_IV)) %>%
rename("Moran's I Statistic" = "Moran_I_Statistic",
"p-value" = "p_value",
"Expected Moran's I" = Expected_Moran) %>%
mutate(across("Moran's I Statistic", ~ format(.x, digits = 2)),
across("p-value", ~format(.x, digits =2, scientific = TRUE))) %>%
flextable()%>%
set_table_properties( width = 1, layout = "autofit"))
# 6. Compare models FE-IV --------------------------------------------------------------
ivreg_model_data <- glance(ivreg_model) %>%
mutate(Model = "5) IV_FE_Model_ivreg")
FE_Model_data <- glance(FE_Model) %>%
mutate(Model = "3) FE_Model_felm")
FE_LL_Model_IV_data <- glance(FE_LL_Model_IV)%>%
mutate(Model = "4) IV_FE_Model_felm")
Linear_Model_data <- glance(Linear_Model)%>%
mutate(Model = "1) Linear_Model_lm")
LogLinear_Model_data <- glance(LogLinear_Model)%>%
mutate(Model = "2) LogLinear_Model_lm")
FE_LL_Model_IV_data$AIC <- AIC(FE_LL_Model_IV)
FE_LL_Model_IV_data$BIC <- BIC(FE_LL_Model_IV)
FE_Model_data$AIC <- AIC(FE_Model)
FE_Model_data$BIC <- BIC(FE_Model)
# Calculate AIC and BIC for ivreg model manually
# Extract residuals
residuals_iv <- residuals(ivreg_model)
# Calculate log-likelihood manually
n <- length(residuals_iv)
sigma2 <- sum(residuals_iv^2) / n
logLik_iv <- -n/2 * (log(2 * pi * sigma2) + 1)
# Calculate the number of parameters
k <- length(coef(ivreg_model))
# Calculate AIC manually
ivreg_model_data$AIC <- 2 * k - 2 * logLik_iv
# Calculate BIC manually
ivreg_model_data$BIC <- log(n) * k - 2 * logLik_iv
# Flextable
(model_comparison <- as.data.frame(bind_rows(
Linear_Model_data,
LogLinear_Model_data,
FE_Model_data,
FE_LL_Model_IV_data,
ivreg_model_data)) %>%
dplyr::select("Model", "r.squared", "sigma", "p.value", "AIC", "BIC") %>%
mutate(across("r.squared", ~ format(.x, digits = 3)),
across("sigma", ~ format(.x, digits = 3)),
across("AIC", ~ format(.x, digits = 1)),
across("BIC", ~ format(.x, digits = 1)),
across("p.value", ~ format(.x, digits = 2))) %>%
rename("Resid.Std.Error" = sigma,
"Multiple R-squared" = r.squared,
"p-value" = p.value) %>%
flextable() %>%
set_table_properties(ft, width = 1, layout = "autofit"))
# Flextable
(model_comparison <- as.data.frame(bind_rows(
Linear_Model_data,
LogLinear_Model_data,
FE_Model_data,
FE_LL_Model_IV_data,
ivreg_model_data)) %>%
dplyr::select("Model", "r.squared", "sigma", "p.value", "AIC", "BIC") %>%
mutate(across("r.squared", ~ format(.x, digits = 3)),
across("sigma", ~ format(.x, digits = 3)),
across("AIC", ~ format(.x, digits = 1)),
across("BIC", ~ format(.x, digits = 1)),
across("p.value", ~ format(.x, digits = 2))) %>%
rename("Resid.Std.Error" = sigma,
"Multiple R-squared" = r.squared,
"p-value" = p.value) %>%
flextable() %>%
set_table_properties(, width = 1, layout = "autofit"))
?set_table_properties
# Flextable
(model_comparison <- as.data.frame(bind_rows(
Linear_Model_data,
LogLinear_Model_data,
FE_Model_data,
FE_LL_Model_IV_data,
ivreg_model_data)) %>%
dplyr::select("Model", "r.squared", "sigma", "p.value", "AIC", "BIC") %>%
mutate(across("r.squared", ~ format(.x, digits = 3)),
across("sigma", ~ format(.x, digits = 3)),
across("AIC", ~ format(.x, digits = 1)),
across("BIC", ~ format(.x, digits = 1)),
across("p.value", ~ format(.x, digits = 2))) %>%
rename("Resid.Std.Error" = sigma,
"Multiple R-squared" = r.squared,
"p-value" = p.value) %>%
flextable() %>%
set_table_properties(, width = 1, layout = "autofit"))
# 8. Model Comparisons ------------------------------------------------
# PTJA coefficients
# FE_Model
summary(FE_Model)
summary(FE_LL_Model_IV, diagnostics=TRUE)
summary(ivreg_model, diagnostics=TRUE)
p_FE_LL <- (coeftest(FE_LL_Model, vcov = vcovHC(FE_LL_Model, type = 'HC0'))) %>%
broom::tidy() %>%
filter(!str_detect(term, "Dist")) %>%
filter(term!="(Intercept)")%>%
dplyr::select( "p.value") %>%
t() %>%
as.numeric()
s_FE_LL <- (coeftest(FE_LL_Model, vcov = vcovHC(FE_LL_Model, type = 'HC0'))) %>%
broom::tidy() %>%
filter(!str_detect(term, "Dist")) %>%
filter(term!="(Intercept)")%>%
dplyr::select( "std.error") %>%
t() %>%
as.numeric()
p_FE_LL_IV <- coeftest(ivreg_model, vcov = vcovHC(ivreg_model, type = 'HC0')) %>%
broom::tidy() %>%
filter(!str_detect(term, "Dist")) %>%
filter(term != "(Intercept)")%>%
dplyr::select( "p.value") %>%
t() %>%
as.numeric()
p_FE_LL_IV_sort <- p_FE_LL_IV[c(3,4,5,1,2)]
s_FE_LL_IV <- (coeftest(ivreg_model, vcov = vcovHC(ivreg_model, type = 'HC0'))) %>%
broom::tidy() %>%
filter(!str_detect(term, "Dist")) %>%
filter(term!="(Intercept)")%>%
dplyr::select( "std.error") %>%
t() %>%
as.numeric()
s_FE_LL_IV_sort <- s_FE_LL_IV[c(3,4,5,1,2)]
stargazer(FE_LL_Model, FE_LL_Model_IV,  type = "html",
column.labels = c("FE-LL",
"FE-LL-IV"),
model.numbers = FALSE,
dep.var.caption = NULL,
p.auto=FALSE,
dep.var.labels.include = TRUE,
covariate.labels = c("Public Transport Job Accessibility (PTJA) (x10<sup>3</sup>)",
"Estimated PTJA - IV (x10<sup>3</sup>)",
"No-car rate (%)",
"Estimated no-car rate - IV (%)",
"White people (%)",
"Single-parent households (%)",
"Low-qualified rate (%)"),
#                       expression("Socio-economic: Intermediate roles (%)"),
omit = c("District", "Constant"),
omit.stat = c("adj.rsq"),
single.row = TRUE,
report = "vcsp*",
no.space = TRUE,
add.lines = list(c("AIC",(round(AIC(FE_Model), 0)),round(AIC(FE_LL_Model_IV)))),
digits=4, format ="e",
ci=FALSE,
digits.extra = 0,
order = c(1, 6, 2, 7, 3, 4, 5),
p = list(p_FE_LL, p_FE_LL_IV_sort),
se = list(s_FE_LL, s_FE_LL_IV_sort),
star.cutoffs = 0.05,
notes = "Confidence Intervals in parentheses. * = p < 0.05",
notes.append = FALSE,
out = "Regression_Comparison.html")
stargazer(FE_LL_Model, FE_LL_Model_IV,  type = "html",
column.labels = c("FE-LL",
"FE-LL-IV"),
model.numbers = FALSE,
dep.var.caption = NULL,
p.auto=FALSE,
dep.var.labels.include = TRUE,
covariate.labels = c("Public Transport Job Accessibility (PTJA) (x10<sup>3</sup>)",
"Estimated PTJA - IV (x10<sup>3</sup>)",
"No-car rate (%)",
"Estimated no-car rate - IV (%)",
"White people (%)",
"Single-parent households (%)",
"Low-qualified rate (%)"),
#                       expression("Socio-economic: Intermediate roles (%)"),
omit = c("District", "Constant"),
omit.stat = c("adj.rsq"),
single.row = TRUE,
report = "vcsp*",
no.space = TRUE,
add.lines = list(c("AIC",(round(AIC(FE_Model), 0)),round(AIC(FE_LL_Model_IV)))),
digits=4, format ="e",
ci=FALSE,
digits.extra = 0,
order = c(1, 6, 2, 7, 3, 4, 5),
p = list(p_FE_LL, p_FE_LL_IV_sort),
se = list(s_FE_LL, s_FE_LL_IV_sort),
star.cutoffs = 0.05,
notes = "Confidence Intervals in parentheses. * = p < 0.05",
notes.append = FALSE,
out = "Regression_Comparison_LCR.html")
